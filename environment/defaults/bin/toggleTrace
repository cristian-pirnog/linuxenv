#! /bin/bash

. ~/.userfunctions

#--------------------------------
# Function printUsage
#--------------------------------
printUsage()
{
    cat << %%USAGE%%

    Usage: $(basename $0) [-h]
           $(basename $0) <on|off> [-a|--all]
           $(basename $0) <on|off> FileNames

where

    <on|off>     (mandatory) Specify if to set (on) or unset (off) the trace.

    -a
    --all         (optional) specifies that the trace will be set/unset for all
                  the source files in the current directory and its subdirs, without
                  asking for confirmation.

    FileName(s)   (optional) specifies to which files the trace will be set/unset. 
                  If not specified, all source files in the directory (and subdire) 
                  will be processed.
%%USAGE%%
}


#--------------------------------
# Function trace_on
#--------------------------------
trace_on()
{
    local myFile=$1
    local hasTrace=`grep '^[[:blank:]]*//.*// crpiTrace$' ${myFile}`

    if [ ! -z "${hasTrace}" ]; then
        echo Enabling trace in file "\"${myFile}\""
        cat ${myFile} | sed "/crpiTrace$/s/^\/\/\([[:blank:]]*cout\)/\1/" > ${myFile}.new
        mv ${myFile}.new ${myFile}
    fi
}


#--------------------------------
# Function trace_off
#--------------------------------
trace_off()
{
    local myFile=$1

    local hasTrace=`grep '^[[:blank:]]*cout.*// crpiTrace' ${myFile}`

    if [ ! -z "${hasTrace}" ]; then
        echo Disabling trace in file "\"${myFile}\""
        cat ${myFile} | sed "/\/\/ crpiTrace$/s/^[[:blank:]]*cout/\/\/&/" > ${myFile}.new
        mv ${myFile}.new ${myFile}
    fi
}



#--------------------------------
# Main script
#--------------------------------

if [ $# -lt 1 ]; then
    printUsage
    exit 1
fi

ARGS=$(getopt -o ha -l "help,all" -n $(basename $0) -- "$@")

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

eval set -- "$ARGS"

while true; do
    case ${1} in
	-h|--help)
	    printUsage
	    exit 0
	    ;;
	-a|--all)
	    echo "Toggling trace to all files in the current directory (and subdirs)."
	    myFiles=`allSourceFiles`
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	"")
	    # This is necessary for processing missing optional arguments 
	    shift
	    ;;
    esac
done

myOption="${1}"
shift

if [[ -z ${myFiles} ]]; then
    myFiles="$*"
fi

if [[ -z ${myFiles} ]]; then
    getAnswer "Are you sure you want to set trace to all files in the current directory (and subdirs)?" || remove=0
    myFiles=`allSourceFiles`
fi

# Commands must be one on each line
supportedCommands="on
off"

if [[ -z $(echo ${supportedCommands}|grep -e "${myOption}") ]]; then
    printf "\nERROR!!! Unsupported command: %s\n" ${myOption}
    printUsage
    exit 1
fi

for f in $myFiles; do
    trace_${myOption} $f
done

