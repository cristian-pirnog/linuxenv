#! /bin/bash


#========================================================================
function printUsage()
{
cat << %%USAGE%%
Usage: `basename $0` [-i] [-x pattern] [-s character] [-d dir] expr

    Description:
        Tool for Checking existence of the searchword in a path

    Options:
        -i      perform case Insensitive search

    	-s      skip lines that have the character before the searchword. 
                 Useful for ignored out-commented lines.

        -x      exclude from search any directories/files that contain the 
                pattern. For multiple patterns to exclude, you must provide
                one -x option for each pattern.

                If this option is not provided, the default pattern will be 
                      '$(echo ${thePattern})'. 
                Otherwise, if pattern does not contain the default pattern, 
                this will be added to it.

        -h      display this help message

	-d dir
	        Directory to search in.

    Arguments:
        expr    expression to search for
%%USAGE%%
}


#------------------------------------------------------------------------
function StripQuotes()
{
    echo ${1:1:-1}
}



#========================================================================
## Main script
#========================================================================

NL='
'

theDirectory="."
theDoCase=""
theFind="find"
thePattern="\.git${NL}\.user${NL}\.o'${NL}\.so${NL}CMakeFiles${NL}\.stack-work${NL}\.dll${NL}\.tags"

supportedOptions="hix:s:d:"
if $(isMac); then
    args=`getopt ${supportedOptions} $*`
else
    args=$(getopt -o ${supportedOptions} -n "fif" -- "$@")
fi

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

set - $args

#
mySkipComments=false
while true; do
    case ${1} in
	-h|--help)
	    printUsage
	    exit 0
	    ;;
        -i)      
            theDoCase="-i"
	    shift
            ;;
        -x)
            thePattern=${thePattern}${NL}$(StripQuotes ${2})
	    shift 2
	    ;;
	-s)
	    mySkipComments=true
	    theComment=${2}
	    shift 2
	    ;;
	-d)
	    theDirectory=${2}
	    shift 2
	    ;;
    	--)
	    shift
	    break
	    ;;
	"")
	    # This is necessary for processing missing optional arguments 
	    shift
	    ;;
    esac
done

if [[ $# -eq 0 ]]; then
    echo -e "Please enter a search word or expression.\n"
    printUsage
    exit 1
fi

theSearchWord=$(StripQuotes "$*")

grepCommand="grep ${theDoCase} -- '${theSearchWord}'"
for f in $($theFind -L $theDirectory -type f | grep -v "$thePattern")
do
    myTemp=`file -b $f | grep 'ASCII text'`
    if [[ -n ${myTemp} ]]; then
        myTemp=$(cat -n $f | ${grepCommand})
	# Check if theSearchWord is only in the first column (i.e. the line number)
	if [[ -z $(echo ${myTemp} | awk '{$1=""; print $0}' | ${grepCommand}) ]]; then
	    myTemp=''
	fi

	if [[ ${mySkipComments} == true ]]
	then
	    myTemp=`echo $myTemp | grep -v "$theComment"`
	fi

        if [[ -n ${myTemp} ]]
        then
            echo "-----------------------------------------------------------"
            echo "$f"
            echo "-----------------------------------------------------------"
            echo "" 
            echo "$myTemp" | grep ${theDoCase} --color=auto -- "${theSearchWord}"
        fi
    fi
done

