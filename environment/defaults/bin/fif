#! /bin/bash


#========================================================================
function printUsage()
{
cat << %%USAGE%%
Usage: `basename $0` [-i] [-f pattern] [-x pattern] [-s character] [-d dir] expr

    Description:
        Tool for Checking existence of the searchword in a path

    Options:
        -i      perform case Insensitive search

    	-s      skip lines that have the character before the searchword.
                 Useful for ignored out-commented lines.

        -x      exclude from search any directories/files that contain the
                pattern. For multiple patterns to exclude, you must provide
                one -x option for each pattern.

                If this option is not provided, the default pattern will be
                      '$(echo ${thePattern})'.
                Otherwise, if pattern does not contain the default pattern,
                this will be added to it.

        -f      search only through files whose names match the pattern

        -h      display this help message

	-d dir
	        Directory to search in.

    Arguments:
        expr    expression to search for
%%USAGE%%
}


#------------------------------------------------------------------------
function StripQuotes()
{
    echo ${1:1:-1}
}



#========================================================================
## Main script
#========================================================================

NL='
'

theDirectory="."
theDoCase=""
theFind="find"
theExcludePattern="\.git${NL}\.user${NL}\.o'${NL}\.so${NL}CMakeFiles${NL}\.stack-work${NL}\.dll${NL}\.tags"

supportedOptions="hix:s:d:f:"
if $(isMac); then
    args=`getopt ${supportedOptions} $*`
else
    args=$(getopt -o ${supportedOptions} -n "fif" -- "$@")
fi

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

set - $args

#
mySkipComments=false
while true; do
    case ${1} in
	-h|--help)
	    printUsage
	    exit 0
	    ;;
    -i)
        theDoCase="-i"
        shift
        ;;
    -f)
        theFilePattern=$(StripQuotes ${2})
        shift 2
        ;;
    -x)
        theExcludePattern=${theExcludePattern}${NL}$(StripQuotes ${2})
        shift 2
        ;;
	-s)
	    mySkipComments=true
	    theComment=$(StripQuotes ${2})
	    shift 2
	    ;;
	-d)
	    theDirectory=$(StripQuotes ${2})
	    shift 2
	    ;;
    	--)
	    shift
	    break
	    ;;
	"")
	    # This is necessary for processing missing optional arguments
	    shift
	    ;;
    esac
done

if [[ $# -eq 0 ]]; then
    echo -e "Please enter a search word or expression.\n"
    printUsage
    exit 1
fi

theSearchWord=$(StripQuotes "$*")
theSearchWord=$(echo "${theSearchWord}"|sed 's_\([\(\)]\)_\\\1_g')

grepCommand="grep -nT ${theDoCase} -E '${theSearchWord}'"

findCmd="${theFind} -L $theDirectory -type f"
if [[ -n "${theFilePattern}" ]]; then
    findCmd="${theFind} -name ${theFilePattern} -type f"
fi

for f in $(${findCmd} | grep -v "$theExcludePattern"); do
    textFileFlag=`file -i -b $f | grep -e '^text'`
    if [[ -z ${theFilePattern} ]] && [[ -z ${textFileFlag} ]]; then
        continue
    fi

    if [[ -z $(echo ${f} | grep -E -e "${theFilePattern}")  ]]; then
        continue
    fi

    if [[ ${mySkipComments} == true ]]; then
        expression=$(eval ${grepCommand} ${f} | grep -v -P "${theComment}"'.*?'"${theSearchWord}")
    else
        expression=$(eval ${grepCommand} ${f})
    fi

    if [[ -n ${expression} ]]; then
        echo "-----------------------------------------------------------"
        echo "$f"
        echo "-----------------------------------------------------------"
        echo ""
        echo "$expression" | sed 's/://' | grep ${theDoCase} -E --color=auto -- "${theSearchWord}"
    fi
done
