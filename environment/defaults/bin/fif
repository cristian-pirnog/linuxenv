#! /bin/bash


#========================================================================
printUsage()
{
cat << %%USAGE%%
    "Usage: `basename $0` [-d directory] [-i] [-x pattern] [-s character] <searchword>

    Description:
        Tool for Checking existence of the searchword in a path

    Options:
        -d      directory to search in

        -i      perform case Insensitive search

    	-s      skip lines that have the character before the searchword. 
                 Useful for ignored out-commented lines.

        -x      exclude from search any directories/files that contain the 
                pattern. For multiple patterns to exclude, you must provide
                one -x option for each pattern.

                If this option is not provided, the default pattern will be 
                      '$(echo ${thePattern})'. 
                Otherwise, if pattern doesn't contain the default pattern, 
                this will be added to it.

        -h      display this help message"

%%USAGE%%
}

#========================================================================

NEW_LINE='
'

theDirectory="."
theDoCase=""
theFind="find"
thePattern='\.git'${NEW_LINE}'\.user'${NEW_LINE}'\.o'${NEW_LINE}'\.so'${NEW_LINE}'CMakeFiles'

ARGS=$(getopt -o hd:ix:s: -n "fif" -- "$@")

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

eval set -- "$ARGS"

#
mySkipComments=0
while true; do
    case ${1} in
	-h|--help)
	    printUsage
	    exit 0
	    ;;
        -d)
            theDirectory="${2}"
	    shift 2
            ;;
        -i)      
            theDoCase="-i"
	    shift
            ;;
        -x)
            thePattern=${thePattern}${NEW_LINE}${2}
	    shift 2
	    ;;
	-s)
	    mySkipComments=1
	    theComment=${2}
	    shift 2
	    ;;
    	--)
	    shift
	    break
	    ;;
	"")
	    # This is necessary for processing missing optional arguments 
	    shift
	    ;;
    esac
done

theSearchWord="$1"

if [[ -z ${theSearchWord} ]]; then
    echo "Please enter a searchWord.
`printUsage`"
    exit 1
fi

myOldDir=`pwd`
cd $theDirectory
myDir=`pwd`
cd "$myOldDir"

IFS=${NEW_LINE}
for f in `$theFind -L $theDirectory -type f | grep -v "$thePattern"`
do
    myTemp=`file $f | awk '{printf $3};' | grep text`
    if [ myTemp ]
    then
        myTemp=`cat -n $f | grep $theDoCase $theSearchWord`
	
	if [ $mySkipComments == "1" ]
	then
	    myTemp=`echo $myTemp | grep -v "$theComment"`
	fi

        if [ "$myTemp" != "" ]
        then
            echo "-----------------------------------------------------------"
            echo "$f"
            echo "-----------------------------------------------------------"
            echo "" 
            echo "$myTemp"
        fi
    fi
done
