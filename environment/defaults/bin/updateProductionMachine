#!/bin/bash

# Run this scrip to install a working environment on CentOS 6.5

#----------------------------------------------
printUsage()
{
cat << %%USAGE%%
     Usage: $(basename ${0}) -h
            $(basename ${0}) --prod host
            $(basename ${0}) --test host
            $(basename ${0}) --sim host
            $(basename ${0}) --all host
            $(basename ${0}) --user userName --path targetPath host

    Description:
        Update the configurations for the production environment on the given host.

    Options:
       -h
       --help
             Print this help message and exit.

       --prod
            Updates the environment for the production user (arbyteprod).

       --test
            Updates the environment for the test user (arbytetest).

       --all
            Updates the environment for all arbyte users.

       --user userName
            Updates the environment for the given userName.

       --path targetPath
            Updates the environment using the specified target path.

%%USAGE%%
}


#----------------------------------------------
# Main script
#----------------------------------------------
ARGS=$(getopt -o h -l "help,prod,test,sim,all,user:,path:" -n "$(basename ${0})" -- "$@")
scriptOptions=$(echo ${ARGS} | awk -F ' -- ' '{print $1}')

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

eval set -- "$ARGS"

targetConfigDir='scratch/cluster/config/RONIN'
userNames=""
while true; do
    case ${1} in
    -h|--help)
        printUsage
        exit 0
        ;;
    --test)
        userNames="arbytetest"
        shift
        ;;
    --prod)
	userNames="arbyteprod"
        shift
        ;;
    --all)
	userNames="arbytetest arbyteprod"
        shift
        ;;
    --user)
	userNames="${2}"
	shift 2
	;;
    --path)
        targetConfigDir="${2}"
	shift 2
	;;
    --sim)
	usersAtHosts="cluster2 cluster"
	targetConfigDir='scratch/cluster/config_master_ID'
	shift
	;;
    --)
        shift
        break
        ;;
    "")
        # This is necessary for processing missing optional arguments 
        shift
        ;;
    esac
done

if [[ $# -gt 0 ]]; then
    usersAtHosts="$@"
fi

if [[ -z ${usersAtHosts} ]]; then
    if [[ $# -lt 1 ]]; then
	printUsage
	exit 1
    fi
    hostNames=$@
    for arg in ${hostNames}; do
	if [[ ${arg} == 'all' ]]; then
	    hostNames="cme eux liffe"
	    break
	fi
    done

    if [[ -z ${userNames} ]]; then
	printf "\n---------------------------------------------\n"
	printf "Must specify the target user. See usage below"
	printf "\n---------------------------------------------\n\n"
	printUsage
	exit 1
    fi
    
    for hostName in ${hostNames}; do
	for user in ${userNames}; do
	    usersAtHosts=${usersAtHosts}" "${user}@${hostName}
	done
    done
fi


rsyncCommand="rsync -azvhq"
for userAtHost in ${usersAtHosts}; do
    printf "Updating for ${userAtHost}...  \t"
    ssh -A ${userAtHost} "mkdir -p '${targetConfigDir}'" > /dev/null 2>&1
    ${rsyncCommand} /mnt/config/RONIN/*.csv ${userAtHost}:${targetConfigDir} > /dev/null 2>&1
    printf "[Done]\n"
done
