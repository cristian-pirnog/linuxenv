#!/bin/bash

#----------------------------------------------
printUsage()
{
    cat << %%USAGE%%
    
    Usage: $(basename ${0}) [-h|--help]
           $(basename ${0}) prod
           $(basename ${0}) [cme|eux|liffe|uat]
 
    Description:
       Builds all the code using CMake configurations.

    Arguments:
       prod
           Starts all production GUIs (currently: cme, eux,liffe). 

       cme
       eux
       liffe
       uat
           Starts the GUI for the specified venue.

    Options:
       -h
       --help
           Prints this help message and exits.

%%USAGE%%
}

source ~/.userfunctions

#----------------------------------------------
# Main script
#----------------------------------------------
ARGS=$(getopt -o h -l "help" -n "$(basename ${0})" -- "$@")

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

eval set -- "$ARGS"

while true; do
    case ${1} in
    -h|--help)
        printUsage
        exit 0
        ;;
    --)
        shift
        break
        ;;
    "")
        # This is necessary for processing missing optional arguments 
        shift
        ;;
    esac
done

if [[ $# -lt 1 ]]; then
    printUsage
    exit 1
fi

monitoringDir="${HOME}/code/ronin/libs/monitoring/VplatGUI/"

# Fetch the venues for which to start the GUI's
for arg in $@; do
    if [[ ${arg} == 'prod' ]]; then
	venues=$(ls ${monitoringDir} | grep -v uat)
	break
    elif [[ ! -d ${monitoringDir}/${arg} ]]; then
	printf "\nUnsuported venue: %s.\n\n" ${venues}
	printUsage && exit 1
    fi
    venues="${venues}${arg} "
done

# Check for running instances
processIds=$(fp com.bbl.gui.StartVplatGui | awk '{print $1}')
if [[ -n "${processIds}" ]]; then
    getAnswer "Found running GUIs. Would you like to kill them?" && kill ${processIds}
fi

# Start the new instances
outfile="output.$(date +%Y%m%d-%H%M%S).log"
for v in ${venues}; do
    cd ${monitoringDir}/${v} && (./rungui > ${outfile} &) && cd - > /dev/null
done

