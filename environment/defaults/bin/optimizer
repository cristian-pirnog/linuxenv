#!/bin/bash

source ~/.userfunctions

#----------------------------------------------
printUsage()
{
cat << %%USAGE%%
     Usage: $(basename ${0}) [-h]
            $(basename ${0}) [options] command [commandOptions]

    Description:
       Runs an optimizer binary, using the given command and options.

    Options:
       -h
       --help
             Print this help message and exit.

       -b branchName
       --branch branchName
             Runs the build from the given branch (default: master).

       -d
       --debug
             Run the Debug build. If not specified, it runs the Release build.

       --roc
       --rocardian
             Runs the rocardian binary. If not specified, it runs the ronin binary.

       --options list,of,options
             Passes the list of options to the optimizer.

%%USAGE%%
}

#----------------------------------------------
# Main script
#----------------------------------------------
ARGS=$(getopt -o hb:d -l "help,branch:,roc,rocardian,debug,options:" -n "$(basename ${0})" -- "$@")

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

eval set -- "$ARGS"

## Parse options
branch=master
buildType=Release
client=ronin
while true; do
    case ${1} in
	-h|--help)
	    printUsage
	    exit 0
	    ;;
	-b|--branch)
	    branch="${2}"
	    shift 2
	    ;;
	-d|--debug)
	    buildType=Debug
	    shift
	    ;;
	--roc|--rocardian)
	    client=rocardian
	    shift
	    ;;
    --options)
        options=$(echo ,${2} | sed 's/,/ --/g')
        shift 2
        ;;
	--)
	    shift
	    break
	    ;;
	"")
	    # This is necessary for processing missing optional arguments 
	    shift
	    ;;
    esac
done


baseDir=${HOME}/deploy/${branch}/${buildType}
libPath=${baseDir}/lib
binary=${baseDir}/bin/${client}.optimizer.exe 

if [[ ! -d ${libPath} ]]; then
    echo "Library path does not exist: ${libPath}"
    exit 1
fi

if [[ ! -f ${binary} ]]; then
    echo "Binary does not exist: ${binary}"
    exit 1
fi

printf "\n[%s %s %s]\n\n" ${client} ${branch} ${buildType} 
LD_LIBRARY_PATH=${libPath} ${binary} $@ ${options}

