#!/bin/bash

#----------------------------------------------
printUsage()
{
cat << %%USAGE%%
     Usage: $(basename ${0}) -h
            $(basename ${0}) [options] [path]

    Description:
        Lists git repositories in the given paths.

    Options:
       -h
       --help
             Print this help message and exit.

       --keepNested
	     Keeps nested repositories (i.e. repos that are
	     part of other repos). If this option is not provided
	     the nested repos are ignored.

    Arguments:
       path
	     An optional path that indicates the base directory
	     for the search.

%%USAGE%%
}


#----------------------------------------------
# Main script
#----------------------------------------------
shortOptions='h'  # Add short options here
longOptions='help,listOptions,keepNested' # Add long options here
ARGS=$(getopt -o "${shortOptions}" -l "${longOptions}" -n "$(basename ${0})" -- "$@")

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

eval set -- "$ARGS"

userNames=""
keepNested=false
baseDir='.'
while true; do
    case ${1} in
    --listOptions)
        echo '--'$(sed 's/,/ --/g' <<< ${longOptions}) $(echo ${shortOptions} | 
            sed 's/[^:]/-& /g') | sed 's/://g'
        exit 0
        ;;
    -h|--help)
        printUsage
        exit 0
        ;;
    --keepNested)
        keepNested=true
        shift
        ;;
    --)
        shift
        break
        ;;
    "")
        # This is necessary for processing missing optional arguments 
        shift
        ;;
    esac
done

if [[ $# -eq 1 ]]; then
    baseDir=${1}
fi

# Fetch all the .git dirs
gitDirs=$(find ${baseDir} -maxdepth 5 -type d -name .git | sort)
if [[ -z ${gitDirs} ]]; then
    exit 0
fi

if [[ isMac ]]; then
    dirs=""
    for d in ${gitDirs}; do
        dirs=$(echo ${dirs} $(dirname "${d}"))
    done
else
    dirs=$(dirname ${gitDirs})
fi

# Filter out the nested repos, if required
if [[ ${keepNested} == false ]]; then
    baseDirs=${dirs}
    for d in ${dirs}; do
	baseDirs=$(printf '%s\n' ${baseDirs[@]} | grep -v "${d}/")
    done
    dirs=${baseDirs}
fi

# Print the list of repos to the screen
for d in ${dirs}; do
    echo ${d} | sed 's_^\./__g'
done

