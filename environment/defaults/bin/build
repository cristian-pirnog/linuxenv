#!/bin/bash

source ~/.userfunctions

#----------------------------------------------
printUsage()
{
    cat << %%USAGE%%

    Usage: $(basename $0) [-h] 
                 [-f] <Debug|Release> [all|clean|fresh]

    Description:
       Builds the code using CMake configurations.

    Options:
       -h
       --help
             {rint this help message and exit

       -f
       --force
             Same as -s.             

       -s
       --script
             Run in script-mode, i.e. don\'t ask for confirmation.

       <x|y>:  one of the arguments in the brackets must be provided

       [x|y]:  optional argument; if none provided, defaults to the first
	       value in the list (i.e. x).

%%USAGE%%
}


#----------------------------------------------
# Main script
#----------------------------------------------

# Check for a CMakeList.txt file
if [[ ! -f "CMakeLists.txt" ]]; then
    echo "No file CMakeLists.txt found in the current directory ($(pwd)). Aborting."
    exit 1
fi

if [[ $# -lt 1 ]]; then
    printUsage
    exit 1
fi

ARGS=$(getopt -o hfj::s -l "help,force,script" -n "build" -- "$@")

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

eval set -- "$ARGS"

#
scriptMode=0
while true; do
    case ${1} in
	-h|--help)
	    printUsage
	    exit 0
	    ;;
	-f|--force|-s|--script)
	    scriptMode=1
	    shift
	    ;;
	-j)
	    moreOptions="${moreOptions} -j"
	    if [[ -n ${2} ]]; then
		moreOptions="${moreOptions}${2}"
		shift
	    fi
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	"")
	    # This is necessary for processing missing optional arguments 
	    shift
	    ;;
    esac
done

buildType=${1}
shift 1
option=${1}
shift 1

case ${option} in
    "clean"|"fresh")
	remove=1
	if [[ ${scriptMode} -eq 0 ]]; then
	    getAnswer "About to remove directory ${buildType}. Continue?" && remove=1
	fi
	test ${remove} -eq 1 && \
	    rm -rf ${buildType} || \
	    exit 0
	
	if [[ ${option} == "clean" ]]; then 
	    exit 0
	else
	    option='all'
	fi
        ;;
    "")
	option="all"
	;;
esac


if [[ ! -d ${buildType} ]]; then
    mkdir -p ${buildType} || exit 1
fi

cd ${buildType}

printf "Running cmake...\n\n"
cmake ..


printf "\n\nRunning make $s...\n\n" ${option}
make ${option} ${moreOptions} $*
