#!/bin/bash

source ~/.userfunctions

#----------------------------------------------
printUsage()
{
    cat << %%USAGE%%

    Usage: $(basename $0) [-h] 
           $(basename $0) [-f|-s] [--shared|--static] <Debug|Release> [all|clean|fresh] [install]

    Description:
       Builds the code using CMake configurations.

    Options:
       -h
       --help
             print this help message and exit

       -f
       --force
             Same as -s.             

       -s
       --script
             Run in script-mode, i.e. don\'t ask for confirmation.

       <x|y>:  one of the arguments in the brackets must be provided

       [x|y]:  optional argument; if none provided, defaults to the first
	       value in the list (i.e. x).

%%USAGE%%
}

#----------------------------------------------
wafBuild()
{
    echo arguments=$@
    COMPILER=g++-4.8.2
    if [[ ${1} == clean ]]; then
	CXX=${COMPILER} waf clean
    fi
    CXX=${COMPILER} waf configure build install $@
}


#----------------------------------------------
cmakeBuild()
{
    local lBuildType=${1}
    local lLibraryType=${2}
    local lOption=${3}
    shift 3
    
    if [[ ! -d ${lBuildType} ]]; then
	mkdir -p ${lBuildType} || exit 1
    fi
    
    cd ${lBuildType}
    
    printf "Running cmake...\n\n"
    cmake -DCMAKE_INSTALL_PREFIX=${HOME}/code -DCMAKE_LIBRARY_TYPE=${lLibraryType} .. || return 1
    
    printf "\n\nRunning make $s...\n\n" ${lOption}
    make ${lOption} ${moreLOptions} $*
}


#----------------------------------------------
# Main script
#----------------------------------------------

if [[ $# -lt 1 ]]; then
    printUsage
    exit 1
fi

ARGS=$(getopt -o hfj::c:s -l "help,force,client:,script,static,shared" -n "build" -- "$@")

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

eval set -- "$ARGS"

echo $@

#
libraryType=SHARED
scriptMode=0
while true; do
    case ${1} in
	-h|--help)
	    printUsage
	    exit 0
	    ;;
	-f|--force|-s|--script)
	    scriptMode=1
	    shift
	    ;;
	-j)
	    moreOptions="${moreOptions} -j"
	    if [[ -n ${2} ]]; then
		moreOptions="${moreOptions}${2}"
		shift
	    fi
	    shift
	    ;;
	-c|--client)
	    clientOption="--client ${2}"
	    shift 2
	    ;;
	--static)
	    libraryType=STATIC
	    shift
	    ;;
	--shared)
	    libraryType=SHARED
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	"")
	    # This is necessary for processing missing optional arguments 
	    shift
	    ;;
    esac
done

buildType=${1}
shift
option=${1}
shift

case ${option} in
    "clean"|"fresh")
	remove=1
	if [[ ${scriptMode} -eq 0 ]]; then
	    getAnswer "About to remove directory ${buildType}. Continue?" || remove=0
	fi

	test ${remove} -eq 1 && \
	    rm -rf ${buildType} || \
	    exit 0
	
	if [[ ${option} == "clean" ]]; then 
	    exit 0
	else
	    option='all'
	fi
        ;;
    "")
	option="all"
	;;
esac


# If there's a wscript file in the current dir, runn a waf build
if [[ -f wscript ]]; then
    wafBuild ${clientOption}
else
    # Check for a CMakeList.txt file
    if [[ ! -f "CMakeLists.txt" ]]; then
	echo "No file CMakeLists.txt found in the current directory ($(pwd)). Aborting."
	exit 1
    fi

    cmakeBuild ${buildType} ${libraryType} ${option} ${moreOptions} $@
fi
