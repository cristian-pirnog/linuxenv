#!/bin/bash

source ~/.userfunctions
	
printUsage()
{

    cat << %%USAGE%%
    
    Usage: $(basename ${0}) [--force] [--branch name] <roc|ron> <Release|Debug> [buildOptions]
 
    Description:
       Builds all the code using CMake configurations.

    Options:
       --branch name
             Use 'name' as branch name, instead of inferring it from the git repositories.

       --force
             Force build, even when issues are found. Should be used, when having mixed
	     branches e.g. due to checking out of old revisions.

       --target
             

%%USAGE%%
}

ARGS=$(getopt -o '' -l "branch:,target:,force,debugLiveFramework" -n ${0} -- "$@")

eval set -- "$ARGS"

#
branchName=''
forceBuild=0
buildDirBase="${HOME}/build"
while true; do
    case ${1} in
	--branch)
	    branchName="${2}"
	    shift 2
	    ;;
	--force)
	    forceBuild=1
	    shift
	    ;;
	--target)
	    buildDirBase="${2}"
	    if [[ ${buildDirBase} != /* ]]; then
		buildDirBase=${HOME}/${buildDirBase}
	    fi
	    shift 2
	    ;;
	--)
	    shift
	    break
	    ;;
	"")
	    # This is necessary for processing missing optional arguments 
	    shift
	    ;;
    *)
        optionsToForward="${optionsToForward} ${1}"
        shift
        ;;
    esac
done

# If wrong arguments, print usage and exit
if [[ $# -lt 1 ]]; then
    printUsage
    exit 1;
fi

case ${1} in
    'roc')
	client=rocardian
	shift
	;;
    'ron')
	client=ronin
	shift
	;;
    *)
	printUsage
	exit 1
	;;
esac

buildType=${1}
shift 1

#if [[ $(pwd) != "${HOME}/code" ]]; then
#    cd ~/code
#fi

# Specify which projects we want to build
if [[ -z ${PROJECTS_TO_BUILD} ]]; then
    PROJECTS_TO_BUILD="katania balerion/strategy balerion/optimizer ${client}/support ${client}/optimizer  ${client}/live" # unit_tests/katania"
else
    PROJECTS_TO_BUILD=$(echo ${PROJECTS_TO_BUILD} | replace '__client__' "${client}")
fi

## Add portfolio build, only if not specified in the environment otherwise
if [[ ${SKIP_PORTFOLIO_BUILD} -ne 1 ]]; then
    PROJECTS_TO_BUILD="${PROJECTS_TO_BUILD} drogon/src/C"
fi

threadCount=$(($(nproc) - 1))
if [[ ${threadCount} < 1 ]]; then
    threadCount=1
fi

# Get the active branch name, if not provided as input
if [[ -z ${branchName} ]]; then
    branchName=$(branch -ls | awk '{print $NF}' | sort | uniq)
    if [[ $(echo ${branchName} | wc -w) -gt 1 ]]; then
	if [[ ${forceBuild} ]]; then
	    echo "Warning!!! Mixed branches found. Forcing build."
	else
	    echo "Mixed branches found. Will not build. Use --force option to force build"
	    exit 1
	fi
    elif [[ $(echo ${branchName} | wc -w) -eq 0 ]]; then
	branchName="production"
    fi
fi

# Remove the target build dirs, if requested
if [[ -n $(echo $@ | grep -P '( |^)fresh( |$)') ]]; then
    rm -rf ${buildDirBase}/${branchName}/${buildType}
    ARGS=$(echo $@ | replace 'fresh' '')
    eval set -- $ARGS
    echo $@
fi

for d in ${PROJECTS_TO_BUILD}; do
    if [[ -f ${d}/.skipBuild ]]; then
	echo -e "\n\nSkipping build of ${d} (.skipBuild file found)"
	continue
    fi

    cd $d && build -s -j${threadCount} ${buildType} --client ${client} --target ${buildDirBase} --branch ${branchName} --project ${d} ${optionsToForward} $@ || exit 1
    cd ->/dev/null
done

if [[ -n $(echo $@|grep 'install') ]]; then
    cp -r ~/code/ronin/libs/kfc/lib/libkfcData.so ~/deploy/${branchName}/${buildType}/lib/
fi
