#!/bin/bash

source ~/.userfunctions

#----------------------------------------------
printUsage()
{
cat << %%USAGE%%
     Usage: $(basename ${0}) -h
            $(basename ${0}) [msg]

    Description:
        Commits all changes staged into git.

    Options:
       -h
       --help
             Print this help message and exit.

    Arguments
    msg (optional)
	     If provided, the script uses the message instead of fetching it from the 
	        "${logFile}" file.
	     
%%USAGE%%
}


#----------------------------------------------
# Main script
#----------------------------------------------

logFile='.user/git.log'

shortOptions='h'  # Add short options here
longOptions='help,listOptions' # Add long options here
ARGS=$(getopt -o "${shortOptions}" -l "${longOptions}" -n "$(basename ${0})" -- "$@")

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

eval set -- "$ARGS"

while true; do
    case ${1} in
    --listOptions)
        listOptions
        exit 0
        ;;
    -h|--help)
        printUsage
        exit 0
        ;;
    --)
        shift
        break
        ;;
    "")
        # This is necessary for processing missing optional arguments 
        shift
        ;;
    esac
done


message="${1}"

# When debuggin script, we echo all (most) commands, instead of executing them
dbg=echo
dbg=''

# If we're commiting a merge, just run git commit
if [[ -f .git/MERGE_HEAD ]]; then
    echo "Looks like you're about to commit a merge"
    git commit
    exit
fi

# Check for empty log file
emptyLogFile=true
if test -s ${logFile}; then
    emptyLogFile=false
fi

if [[ -n ${message} ]]; then
    if [[ ${emptyLogFile} == false ]]; then
	getAnswer "Git log file not empty: ${logFile}. Ignore and proceed?" || exit 0
    >${logFile}
    fi
    git commit -m "${message}"
else
    echo " "
    NON_REPO_FILES=`st --porcelain | grep '?'`
    if [ ${#NON_REPO_FILES} -ne 0 ]
    then
        echo -e "------------------------------------------" 
        echo -e "Files not added to the repository\n"
        echo -e "${NON_REPO_FILES}" | awk '{print "   "$0}'
        echo -e "\n------------------------------------------"
    fi
    echo "Files changed"
    echo " "
    st  --untracked-files=no
    
    if [[ ${emptyLogFile} == true ]]; then
        echo "The log file is empty. Aborting."
        exit 1
    fi

    echo " "
    echo "=================== Begin of log file (" $logFile ") ========================="
    cat $logFile
    
    echo "==================== End of log file (" $logFile ") =========================="
    echo
    
    # Format the code
    if [ -f .astyle ]; then
        astyle --recursive '*.cpp' '*.h' 
    else
        echo "NOT Formatting the code with ASTYLE (no .astyle file found)"
    fi
    
    getAnswer "Would you like to use the above log message?" || exit 0

    git commit -F $logFile && mv ${logFile} ${logFile}.org && > ${logFile}
fi
