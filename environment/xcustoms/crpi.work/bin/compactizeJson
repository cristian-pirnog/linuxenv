#!/bin/bash

source ~/.userfunctions

#----------------------------------------------
printUsage()
{
cat << %%USAGE%%
     Usage: $(basename ${0}) -h
            $(basename ${0}) [-u id] fileName

    Description:
        Takes a json file removes new lines and spaces, encloses the.
	text in single quotes and prints it to stdout.
	
    Options:
       -h
       --help
             Print this help message and exit.

       -u id
             Generate the output as an sql UPDATE statement for the
	     'service_versions' table.
	     
    Arguments:
       fileName
	     The name of the json file to process.

%%USAGE%%
}


#----------------------------------------------
# Main script
#----------------------------------------------
shortOptions='hu:'  # Add short options here
longOptions='help,listOptions' # Add long options here
if $(isMac); then
    ARGS=`getopt "${shortOptions}" $*`
else
    ARGS=$(getopt -u -o "${shortOptions}" -l "${longOptions}" -n "$(basename ${0})" -- "$@")

fi

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

eval set -- "$ARGS"

postCmd=''
sqlUpdate=false
while true; do
    case ${1} in
    --listOptions)
	listOptions
        exit 0
        ;;
    -h|--help)
        printUsage
        exit 0
        ;;
    -u)
	sqlUpdate=true
	suffix=" WHERE id = ${2};"
	clip=true
        shift 2
        ;;
    --)
        shift
        break
        ;;
    "")
        # This is necessary for processing missing optional arguments 
        shift
        ;;
    esac
done

if [[ $# -lt 1 ]]; then
    printUsage
    exit 1
fi

# Uncomment this for enabling debugging
# set -x

source ~/.userfunctions

fileName=${1}

if [[ ! -f ${fileName} ]]; then
    exitWithError "\nCouldn't find file '${fileName}'."
elif [[ ! $(jsonlint-php ${fileName}) ]]; then
    exitWithError "\n'{fileName} is not a valid JSON file"
fi

if [[ ${sqlUpdate} == true ]]; then
    column=service_spec
    if [[ ${fileName} == *settings*.json ]] || [[ -n $(grep '"type"' ${fileName}) ]]; then
	column=settings_spec
    elif [[ ${fileName} == *scopes*.json ]] || [[ -n $(grep '"May the device"' ${fileName}) ]]; then
	column=scopes_spec
    fi
    prefix="UPDATE service_versions SET ${column}="
fi

output=$(echo ${prefix}$(cat ${fileName}|tr '\n' ' '|sed 's/  / /g'|sed -r 's/([,])/\1 /g'|awk '{print "'"'"'"$0"'"'"'"}')${suffix})

echo
echo ${output}
if [[ -n ${clip} ]]; then
    echo ${output}|xclip
    printf 'Output also copied to clipboard...\n'
fi
echo
