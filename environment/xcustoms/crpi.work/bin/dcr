#!/bin/bash

source ~/.userfunctions

#----------------------------------------------
printUsage()
{
cat << %%USAGE%%
     Usage: $(basename ${0}) -h
            $(basename ${0}) [-n|--nobash] [serviceName]

    Description:
        Wrapper for 'docker-compose run'

    Options:
       -h
       --help
             Print this help message and exit.

     --nobash
             Don\'t run bash when starting the container, but the default command.

    Arguments:
       serviceName
	     Optional argument for naming which service it should start.
	     Defaults to one of (in this order): api, frontend.

%%USAGE%%
}


#----------------------------------------------
# Main script
#----------------------------------------------
shortOptions='hn'  # Add short options here
longOptions='help,nobash,listOptions' # Add long options here
if $(isMac); then
    ARGS=`getopt "${shortOptions}" $*`
else
    ARGS=$(getopt -u -o "${shortOptions}" -l "${longOptions}" -n "$(basename ${0})" -- "$@")

fi

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

eval set -- "$ARGS"

cmd='/bin/bash'
while true; do
    case ${1} in
    --listOptions)
        listOptions
        exit 0
        ;;
    -h|--help)
        printUsage
        exit 0
        ;;
    -n|--nobash)
        cmd=''
	shift
        ;;
    --)
        shift
        break
        ;;
    "")
        # This is necessary for processing missing optional arguments
        shift
        ;;
    esac
done

# Uncomment this for enabling debugging
# set -x

service=${1}

# Behavior tests use default command
if [[ ${service} == "behavior_tests" ]]; then
    cmd=''
fi

if [[ -z ${service} ]]; then
    service=api
#    composeFile=docker-compose.yml
#    if [[ -f ${composeFile} ]] && [[ -n $(grep -E '^ +frontend:' ${composeFile}) ]]; then
#	service=frontend
#    fi
fi

docker-compose run --service-ports ${service} ${cmd}
