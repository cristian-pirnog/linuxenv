# Snippets for CHANGELOG.md
'.source.gfm':
    'insert next release template':
        'prefix': 'note'
        'body': """
## [${1}] - ReleaseDate
### Added
-

### Changed
- ${2}

"""

# Snippets for golang
'.source.go':
    'return nil and error':
      'prefix': 'rne'
      'body': 'return nil, err'

    'insert log scoping':
      'prefix': 'log'
      'body': """
log.Printf("${1} <----------")
defer log.Printf("${1} ---------->")
"""

    'return err if err':
      'prefix': 'iferr'
      'body': """
      if err != nil {
          return err
      }
      """

    'insert fmt.Println':
      'prefix': 'println'
      'body': 'fmt.Println(${1})'

    'insert fmt.Printf':
      'prefix': 'printf'
      'body': 'fmt.Printf("${1} = ${2:%+v}\\\\n", ${1})'

    'insert authorize check':
        'prefix': 'auth'
        'body': """
if err := AuthorizeRole(db, r, accountID, models.${1:ADMIN}); err != nil {
	return err
}
    """

    'insert generic check scope':
        'prefix': 'checkScopeGeneric'
        'body': """
// May the device do ${1} operations?
if err := api.CheckScope(r, Scope${1}); err != nil {
	return err
}
    """

    'insert check read scope':
        'prefix': 'checkRead'
        'body': """
// May the device do READ operations?
if err := api.CheckScope(r, ScopeRead); err != nil {
	return err
}
    """

    'insert check write scope':
        'prefix': 'checkWrite'
        'body': """
// May the device do WRITE operations?
if err := api.CheckScope(r, ScopeWrite); err != nil {
	return err
}
    """

    'insert new type template':
        'prefix': 'typeTemplate'
        'body': """
// ${1} defines a ${2}
type ${1} struct {
	${3}
}
    """

    'insert new function template':
        'prefix': 'funcTemplate'
        'body': """
// ${1} ${4}
func ${1}(${2}) ${3} {
	${5}
}
    """

    'insert new test function template':
        'prefix': 'testTemplate'
        'body': """
// Test${1} test for ${1}
func Test${1}(t *testing.T) {
	${2}
}
    """
