'.source.go':
    'return nil and error':
      'prefix': 'rne'
      'body': 'return nil, err'

    'return err if err':
      'prefix': 'iferr'
      'body': """
      if err != nil {
          return err
      }
      """

    'insert fmt.Println':
      'prefix': 'println'
      'body': 'fmt.Println(${1})'

    'insert fmt.Printf':
      'prefix': 'printf'
      'body': 'fmt.Printf("${1} = ${2:%v}\\\\n", ${1})'

    'insert authorize check':
        'prefix': 'auth'
        'body': """
if err := AuthorizeRole(db, r, accountID, models.${1:ADMIN}); err != nil {
	return err
}
    """

    'insert check read scope':
        'prefix': 'checkRead'
        'body': """
// May the device do READ operations?
if err := api.CheckScope(r, model.ScopeRead); err != nil {
	return err
}
    """

    'insert check write scope':
        'prefix': 'checkWrite'
        'body': """
// May the device do WRITE operations?
if err := api.CheckScope(r, model.ScopeWrite); err != nil {
	return err
}
    """

    'insert new type template':
        'prefix': 'typeTemplate'
        'body': """
// ${1} defines a ${2}
type ${1} struct {
	${3}
}
    """
