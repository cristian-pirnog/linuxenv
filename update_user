#!/bin/bash

#----------------------------------------------
printUsage()
{
cat << %%USAGE%%
Usage: $(basename ${0}) [-h|--help]
       $(basename ${0}) [--nopull]

    Description:
        Updates the user environment.

    Options:
       -h
       --help
             Print this help message and exit.

       --nopull
             Update the environment without doing a 'git pull'.

       --noask
       --batch
             Update the environment without asking for confirmation.
%%USAGE%%
}


#----------------------------------------------
# Function "GetFilePath"
#----------------------------------------------
# Arguments: $1 = FULL_FILE_NAME
#
#
GetFilePath()
{
    FULL_FILE_NAME=$1
    FILE_BASE_NAME=`basename $FULL_FILE_NAME`
    echo `echo $FULL_FILE_NAME | sed "s/$FILE_BASE_NAME$//"`
}


#----------------------------------------------
# Function 'makeSymLink'
#----------------------------------------------
# Arguments: $1 = TARGET_NAME
#            $2 = LINK_NAME
#
makeSymLink()
{
    TARGET_NAME=$1
    LINK_NAME=$2

    if [[ -d $TARGET_NAME ]]; then
        if [[ ! -d $LINK_NAME ]]; then
            ln -s $TARGET_NAME $LINK_NAME
        fi
    else
        echo "Target directory $TARGET_NAME does not exist. Will not make symlink."
    fi
}



#----------------------------------------------
# Main script
#----------------------------------------------
shortOptions='h'  # Add short options here
longOptions='help,nopull,noask,batch,listOptions' # Add long options here
if $(environment/defaults/bin/isMac) ; then
    ARGS=`getopt ${shortOptions} $*`
else
   ARGS=$(getopt -o "${shortOptions}" -l "${longOptions}" -n "$(basename ${0})" -- "$@")
fi

# If wrong arguments, print usage and exit
if [[ $? -ne 0 ]]; then
    printUsage
    exit 1;
fi

eval set -- "$ARGS"

noPull=false
noAsk=false
while true; do
    case ${1} in
    --listOptions)
        echo '--'$(sed 's/,/ --/g' <<< ${longOptions}) $(echo ${shortOptions} | sed 's/[^:]/-& /g') | sed 's/://g'
        exit 0
        ;;
    -h|--help)
        printUsage
        exit 0
        ;;
    --nopull)
        noPull=true
        shift
        ;;
    --noask|--batch)
        noAsk=true
        shift
        ;;
    --)
        shift
        break
        ;;
    "")
        # this is necessary for processing missing optional arguments 
        shift
        ;;
    esac
done

source ./environment/defaults/.userenv
source base.sh

TARGET_DIRECTORY=$HOME/.${USER}_config

BASE_DIRECTORY=`GetFilePath $0`

if [[ $(pwd) != ${TARGET_DIRECTORY} ]]; then
    echo -e "\nThe checkout must be located in: ${TARGET_DIRECTORY}. Exiting.\n"
    exit 1
fi

if [[ ${BASE_DIRECTORY} != "./" ]]; then
   echo "This script must be run from the directory where it resides: $BASE_DIRECTORY"
   exit 1
fi

if [[ ${noAsk} = false ]]; then
    printf "\nWarning!!! This will overwrite the existing user customizations.\n"
    printf "Are you sure you want to continue? [Y/N] "
    read answer

    case $answer in
	y| Y | yes | Yes | YES) ;;
	*) echo "Aborting at user request." & exit 0
    esac
fi

XCUSTOMS_USER=$(GetCachedConfigValue XCUSTOMS_USER)
if [[ -z ${XCUSTOMS_USER} ]]; then
    XCUSTOMS_USER=$USER

    case ${XCUSTOMS_USER} in
       arbyteprod)
           XCUSTOMS_USER=arbyte
           DEFAULT_CUSTOM_DIR=arbyte.prod
           SaveConfigValueToCache DEFAULT_CUSTOM_DIR ${DEFAULT_CUSTOM_DIR}
           ;;
       arbytetest)
           XCUSTOMS_USER=arbyte
           DEFAULT_CUSTOM_DIR=arbyte.test
           SaveConfigValueToCache DEFAULT_CUSTOM_DIR ${DEFAULT_CUSTOM_DIR}
           ;;
    esac
fi

AskForValue "Enter user name (default ${XCUSTOMS_USER}): " XCUSTOMS_USER

SaveConfigValueToCache XCUSTOMS_USER ${XCUSTOMS_USER}

CONFIG_DIR=$HOME/.$USER"_config"

# Create the 'bin' directory
if [ ! -d $HOME/bin ]; then
    mkdir $HOME/bin || (echo "Could not create the 'bin' directory" && exit 0)
fi

if [[ ${noPull} == false  ]]; then
    echo "Updating from the GIT repository"
    git pull || exit 1
fi

# Run the install script 
source install.sh

echo "Installation complete"
